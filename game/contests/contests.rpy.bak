label testcontest:

python:
    coordinators = [
        CoordinatorGroup([
            Coordinator(first_name, condition=0, isprotag=True)
        ], 
        performanceleanings=None, 
        moveleanings=None),
        CoordinatorGroup([
            Coordinator("Brendan", condition=30)
        ], 
        performanceleanings={ Performances.Audio : 30, Performances.Physical  : 20, Performances.Props : 10 }, 
        moveleanings={ ContestMoveType.Cute : 10, ContestMoveType.Beautiful : 30, ContestMoveType.Cool : 20, ContestMoveType.Clever : 10, ContestMoveType.Tough : 30 }),
        CoordinatorGroup([
            Coordinator("May", condition=15)
        ], 
        performanceleanings={ Performances.Audio : 10, Performances.Physical  : 20, Performances.Props : 30 }, 
        moveleanings={ ContestMoveType.Cute : 30, ContestMoveType.Beautiful : 10, ContestMoveType.Cool : 20, ContestMoveType.Clever : 30, ContestMoveType.Tough : 10 }),
        CoordinatorGroup([
            Coordinator("Jasmine", condition=5)
        ], 
        performanceleanings={ Performances.Audio : 20, Performances.Physical : 0, Performances.Props : 20 }, 
        moveleanings={ ContestMoveType.Cute : 10, ContestMoveType.Beautiful : 20, ContestMoveType.Cool : 20, ContestMoveType.Clever : 50, ContestMoveType.Tough : 50 }),
        CoordinatorGroup([
            Coordinator("Dawn", condition=45)
        ], 
        performanceleanings=None, 
        moveleanings=None)        
    ]

    judges = [
        Judge(wallace, biases={ ContestMoveType.Cute : 20, ContestMoveType.Beautiful : 30, ContestMoveType.Cool : 30, ContestMoveType.Clever : 10, ContestMoveType.Tough : 30 }),
        Judge(fantina, biases={ ContestMoveType.Cute : 10, ContestMoveType.Beautiful : 30, ContestMoveType.Cool : 30, ContestMoveType.Clever : 30, ContestMoveType.Tough : 20 }),
        Judge(phobos, biases={ ContestMoveType.Cute : 30, ContestMoveType.Beautiful : 30, ContestMoveType.Cool : 20, ContestMoveType.Clever : 30, ContestMoveType.Tough : 10 })
    ]

call Contest(coordinators, judges)

"reached here"

return




label Contest(coordinators, judges):

call clearscreens()
scene blank
hide blank

python:
    Turn = 1
    Judges = judges
    Coordinators = coordinators
    Coordinators = sorted(Coordinators, key=lambda coord: -coord.EvaluateCondition())
    ProtagCoordinator = None
    for coord in Coordinators:
        if (coord.IsProtag()):
            ProtagCoordinator = coord
            break

show screen ContestUI

#Animate the coordinators lining up like a boy band, then sending out their PokÃ©mon

#iterate through the judges as each states what they're looking for in the following round

Character("Announcer") "\"It's a hot day in the Contest Coliseum! The judges look like they're in fine form, chatting and gossiping... the atmosphere is right for a showdown of coordinators!\""
Character("Announcer") "\"Let's see... what will the judges want to be seeing today?\""

python:
    for judge in judges:
        judge.SetSeeking()
        renpy.pause(0.3)

Character("Announcer") "\"Great! The judges are ready, and the crowd's raring to go! Let's see the performers!\""

python:
    renpy.show(Coordinators[0].GetImage(), at_list=[slideincontest(1/6)])
    renpy.say(Character("Announcer"), "\"In the first seed, it's [Coordinators[0].GetName()], performing with [Coordinators[0].GetFirstMonName()]! We all have high expectations for this one!\"")

    renpy.show(Coordinators[1].GetImage(), at_list=[slideincontest(2/6)])
    renpy.say(Character("Announcer"), "\"In the second seed, it's [Coordinators[1].GetName()], performing with [Coordinators[1].GetFirstMonName()]! Can the first seed be taken down?\"")

    pronouncalc = ("are they" if Coordinators[2].GetSex() == Genders.Unknown else ("is he" if Coordinators[2].GetSex() == Genders.Male else "is she"))
    renpy.show(Coordinators[2].GetImage(), at_list=[slideincontest(3/6)])
    renpy.say(Character("Announcer"), "\"In the third seed, it's [Coordinators[2].GetName()], performing with [Coordinators[2].GetFirstMonName()]! Beware the quiet ones! What tricks [pronouncalc] hiding?\"")

    renpy.show(Coordinators[3].GetImage(), at_list=[slideincontest(4/6)])
    renpy.say(Character("Announcer"), "\"In the fourth seed, it's [Coordinators[3].GetName()], performing with [Coordinators[3].GetFirstMonName()]! Quite a ways to climb--quite a bit to gain!\"")

    renpy.show(Coordinators[4].GetImage(), at_list=[slideincontest(5/6)])
    pronouncalc = ("these performers" if Coordinators[4].IsGroup() else "this performer")
    pronouncalc2 = ("them" if Coordinators[4].GetSex() == Genders.Unknown else ("him" if Coordinators[4].GetSex() == Genders.Male else "her"))
    renpy.say(Character("Announcer"), "\"In the final seed, it's [Coordinators[4].GetName()], performing with [Coordinators[4].GetFirstMonName()]! There's no doubt that [pronouncalc] has something to prove! Let's give [pronouncalc2] the chance!\"")

    for i, coord in enumerate(Coordinators):
        renpy.show(coord.GetImage(), at_list=[hidecontest((i + 1)/6)])

pause 1.0

Character("Announcer") "\"The performers are all ready! The lights are queued! The audience is on the edge of their seats... so, without any further ado, let's start the music!"

label ContestRound:

if (Turn == 11):
    jump ContestResults

elif (Turn > 1):
    hide screen ContestUIAbove with dis

    Character("Announcer") "\"Fantastic! Time to move onto round [Turn], then!\""

python:
    PlannedMoves = []#has planned moves put in in-order. Elements are (coordinatorobj, performancetype, moveused, predictedpoints)
    HintedCoordinators = []#the coordinators that have displayed 'tells'

    for i in range(len(Coordinators)):
        coord.ResetCurrentPoints()
        coord = Coordinators[i]
        if (not coord.IsProtag()):
            movevals = {}
            performtype = coord.GeneratePerformance()
            maxpointsearned = 0
            for move in coord.GetMoves():
                
                pointsearned = coord.CalculateMove(performtype, move)
                if (pointsearned > maxpointsearned):
                    maxpointsearned = pointsearned
                movename = move.Name
                appealstojudges = 0
                unappealstojudges = 0
                jackpothit = False
                for judge in Judges:
                    if (judge.GetSeeking() == ContestStringToMacro(move.Contest)):
                        appealstojudges += 1
                        if (judge.GetSparks() == judge.GetJackpotLimit() - 1):
                            jackpothit = True
                    elif (IsUnappealing(judge.GetSeeking(), ContestStringToMacro(move.Contest))):
                        unappealstojudges += 1
                jamswhat = "Audio" if JamsAudio(move) else ("Physical" if JamsPhysical(move) else ("Props" if JamsProps(move) else "Nothing"))
                movevals[move] = round(pointsearned)
                print((movename, "Earning points: " + str(pointsearned), "Jams: " + jamswhat, "Safe: " + str(IsRoutineMove(move)), "Appeal bonus: " + str(appealstojudges), "Unappeal penalty: " + str(unappealstojudges), "Jackpot: " + str(jackpothit)))
            print(movevals)
            moveselected = weighted_random_selection(movevals)
            print(moveselected.Name + " was selected")
            PlannedMoves.append((coord, performtype, moveselected, maxpointsearned))
            if (i < Coordinators.index(ProtagCoordinator)):
                if (RandInt(0, coordinatingknowledge) > coord.EvaluateCondition()):
                    HintedCoordinators.append(coord)
                    renpy.transition(dis)
                    renpy.show("flashback")
                    renpy.show(coord.GetImage("angrybrow"), at_list=[popupcontest((i + 1)/6)])
                    if (performtype == Performances.Audio):
                        renpy.say(None, GetAudioHint(coord))
                    elif (performtype == Performances.Physical):
                        renpy.say(None, GetPhysicalHint(coord))
                    elif (performtype == Performances.Props):
                        renpy.say(None, GetPropsHint(coord))
        else:
            for i, othercoord in enumerate(Coordinators):
                if (othercoord in HintedCoordinators):
                    renpy.show(othercoord.GetImage("-angrybrow"), at_list=[hidecontest((i + 1)/6)])
            renpy.transition(dis)
            renpy.hide("flashback")
            renpy.say(None, "What will you do in the following round?")
            actiontype, stance, movemon = renpy.call_screen("ContestChoices", coordinator=coord)
            PlannedMoves.append((coord, stance, movemon, actiontype))

Character("Announcer") "\"The performers are ready to rock! Let's see the performances begin!"

python:
    for coord in Coordinators:
        coord.ResetCurrentPoints()

show screen ContestUIAbove  with dis

python:
    performancetypes = {}
    for i, plannedmove in enumerate(PlannedMoves):
        coord, stance, movemon, predictedpoints = plannedmove
        if (stance not in performancetypes.keys()):
            performancetypes[stance] = [coord]
        else:
            performancetypes[stance].append(coord)
        renpy.show(coord.GetImage("angrybrow"), at_list=[popupcontest((i + 1)/6)])
        if (isinstance(predictedpoints, str) and predictedpoints == "Switch"):
            coord.Reorder(movemon)
            renpy.say(Character("Announcer"), "\"What a twist! A contestant is switching out! You don't often see {i}that{/i} in contests! Points for audacity, at least!\"")
            coord.AwardedPoints(3, None)
        else:
            repetitive = False
            if (RepeatedMove(coord, Turn, movemon)):
                repetitive = True
                isare = "is" if coord.IsSolo() else "are"
                renpy.say(Character("Announcer"), "\"Oh... it looks like [coord.GetName()] [isare] having [coord.GetFirstMonName()] use [movemon.Name] again... I'm not sure the judges will be excited to see that!\"")
                renpy.say(None, "[coord.GetName()] made [performancestring] that compliments [coord.GetFirstMonName()]'s [movemon.Name]!")
            else:
                renpy.say(Character("Announcer"), "\"[GetPerformanceDialog(stance, ContestStringToMacro(movemon.Contest), movemon)]\"")

            performancestring = "an audio appeal"
            if (stance == Performances.Physical):
                performancestring = "a physical appeal"
            elif (stance == Performances.Props):
                performancestring = "a prop-based appeal"

            for judge in Judges:
                if (IsRoutineMove(movemon)):
                    pointsearned = 1 if random.random() < 0.5 else 2
                else:
                    pointsearned = 2
                if (repetitive):
                    pointsearned -= 1
                if (ContestStringToMacro(movemon.Contest) == judge.GetSeeking()):
                    pointsearned += 1
                    judge.IncreaseSparks()
                    if (judge.GetSparks() < judge.GetJackpotLimit()):
                        renpy.show(coord.GetImage("angrybrow"))
                        renpy.say(None, "The performance went over well with [judge.GetName()]!")
                    else:
                        pointsearned += 10
                        renpy.show(coord.GetImage("happy"))
                        renpy.say(None, "The performance went over incredibly well with [judge.GetName()]! [judge.GetHePronoun().title()]'s clapping and shouting! What a show!")
                        judge.ResetSparks()
                elif (IsUnappealing(judge.GetSeeking(), ContestStringToMacro(movemon.Contest))):
                    pointsearned -= 1
                    judge.DecreaseSparks()
                    renpy.show(coord.GetImage("sadbrow"))
                    renpy.say(None, "The performance did not go over well with [judge.GetName()]...")
                
                if (pointsearned != 0):
                    if (pointsearned < 11):
                        coord.AwardedPoints(pointsearned, judge)
                    else:
                        coord.AwardedPoints(pointsearned - 10, judge)
                        renpy.pause(1.0)
                        coord.AwardedPoints(10, judge)

            if (JamsAudio(movemon)):
                for otherplannedmove in PlannedMoves[:i]:
                    othercoord, otherstance, othermovemon, otherpredictedpoints = otherplannedmove
                    if (otherpredictedpoints != "Switch" and otherstance == Performances.Audio): 
                        if (IsRoutineMove(othermovemon)):
                            renpy.say(Character("Announcer"), "\"Remarkable! Even in the face of a deafening [movemon.Name], [othercoord.GetName()] maintains [othercoord.GetHisPronoun()] audio routine! Such concentration!\"")
                        else:
                            renpy.say(Character("Announcer"), "\"Oh no! The noisy [movemon.Name] completely drowned out [othercoord.GetName()]'s appeal! Can anyone hear [othercoord.GetHimPronoun()]?!\"")
                            othercoord.JamPoints()

            if (JamsProps(movemon)):
                for otherplannedmove in PlannedMoves[:i]:
                    othercoord, otherstance, othermovemon, otherpredictedpoints = otherplannedmove
                    if (otherpredictedpoints != "Switch" and otherstance == Performances.Props): 
                        if (IsRoutineMove(othermovemon)):
                            renpy.say(Character("Announcer"), "\"Remarkable! Even in the face of a technical [movemon.Name], [othercoord.GetName()] maintains [othercoord.GetHisPronoun()] prop-based routine! Such concentration!\"")
                        else:
                            renpy.say(Character("Announcer"), "\"Oh no! That technical [movemon.Name] totally overshadows [othercoord.GetName()]'s appeal! PokÃ©mon moves are something else!\"")
                            othercoord.JamPoints()

            if (JamsPhysical(movemon)):
                for otherplannedmove in PlannedMoves[:i]:
                    othercoord, otherstance, othermovemon, otherpredictedpoints = otherplannedmove
                    if (otherpredictedpoints != "Switch" and otherstance == Performances.Physical): 
                        if (IsRoutineMove(othermovemon)):
                            renpy.say(Character("Announcer"), "\"Remarkable! Even in the face of a powerful [movemon.Name], [othercoord.GetName()] maintains [othercoord.GetHisPronoun()] physical routine! Such concentration!\"")
                        else:
                            renpy.say(Character("Announcer"), "\"Oh no! That powerful [movemon.Name] totally overwhelmed [othercoord.GetName()]'s appeal! PokÃ©mon are really something else!\"")
                            othercoord.JamPoints()

        renpy.show(coord.GetImage("-sadbrow -happy -angrybrow"), at_list=[hidecontest((i + 1)/6)])

    # Group characters by their performance type
    performance_groups = defaultdict(list)

    for plannedmove in PlannedMoves:
        coord, stance, movemon, predictedpoints = plannedmove
        performance_groups[len(performancetypes[stance])].append(plannedmove)

    # Loop through each group and generate a collective description
    for group_type, group in performance_groups.items():
        names = [coord.GetName() for coord, stance, movemon, predictedpoints in group]

        if group_type == 1:
            if (len(group) == 1):
                renpy.say(Character("Announcer"), f"\"A standout performance by {names[0]}! All eyes were on {group[0][0].GetHimPronoun()}!\"")
            else:
                renpy.say(Character("Announcer"), f"\"A standout performance by {' and '.join(names)}! All eyes were on them!\"")
            for coord, stance, movemon, predictedpoints in group:
                coord.AwardedPoints(7, None)
        elif group_type == 2:
            renpy.say(Character("Announcer"), f"\"A great performance by {' and '.join(names)}! The judges were definitely watching them!\"")
            for coord, stance, movemon, predictedpoints in group:
                coord.AwardedPoints(3, None)
        elif group_type == 3:
            renpy.say(Character("Announcer"), f"\"A fine performance by {' and '.join(names)}! The judges will keep an eye on them!\"")
            for coord, stance, movemon, predictedpoints in group:
                coord.AwardedPoints(1, None)

        # Handle round and move recording
        for coord, stance, movemon, predictedpoints in group:
            coord.RecordRound(Turn, coord.GetCurrentPoints())
            if isinstance(predictedpoints, str):
                coord.RecordMove(Turn, None)
            else:
                coord.RecordMove(Turn, movemon.Name)

Character("Announcer") "\"The rankings are in for this round, folks! Let's see what the placings are, then...\""

python:
    positiondic = {}
    for i, coord in enumerate(Coordinators):
        positiondic[coord] = (i+1) / 6

    Coordinators = sorted(Coordinators, key=lambda x:x.GetCurrentPoints(), reverse=True)

    for i, coord in enumerate(Coordinators):
        renpy.show(coord.GetImage(overridemood=11-5*i), at_list=[contestmovement(positiondic[coord], (i+1) / 6)])

pause 2.0

$ Turn += 1

jump ContestRound

label ContestResults:

hide screen ContestUIAbove with dis

Character("Announcer") "\"That's a wrap, everyone! The appeals are over! Nothing's left but the crying, now!\""

python:
    for i, coord in enumerate(Coordinators):
        coord.ResetCurrentPoints()
        renpy.transition(dis)
        renpy.hide(coord.GetImage())
        renpy.show(coord.GetImage("contest"), at_list=[contestmovement((i+1) / 6, (i+1) / 6)])

Character("Announcer") "\"The judges are deliberating...\""

Character("Announcer") "\"{w=0.5}.{w=0.5}.{w=0.5}.\""
Character("Announcer") "\"{w=0.5}.{w=0.5}.{w=0.5}.\""
Character("Announcer") "\"{w=0.5}.{w=0.5}.{w=0.5}.\""


Character("Announcer") "\"They've reached a decision, ladies and gentlemen! Let's reveal the results of the rounds, now!\""

show screen ContestUIAbove with dis

Character("Announcer") "\"Round zero, the seeding round! The Coordinators and their PokÃ©mon were evaluated on their physical condition!\""

python:
    highestval = 0
    for coord in Coordinators:
        conditionpoints = coord.GetPointsOnTurn(0)
        if (conditionpoints > highestval):
            highestval = conditionpoints
    
    for coord in Coordinators:
        coord.CurrentPoints = math.ceil(20 * (coord.GetPointsOnTurn(0) / highestval))

    for i in range(1, 11):
        renpy.say(Character("Announcer"), "\"Round [i]!\"")
        
        for coord in Coordinators:
            coord.CurrentPoints += coord.GetPointsOnTurn(i)


Character("Announcer") "\"And that's everything, ladies and gentlemen! As always, the Coordinator or Coordinators with the most points is the winner, and that means the winner can only be...!\""


    






                






#narrator states what the crowd's like right now, then says 'Round X begins! Make your move, and carve your glory into the hearts of all! How will you perform?!'

#pick whether you're going to perform or switch out

#if you pick perform
    # pick what sort of performance you want to make (audio/visual/props)

    # pick which move you want your pokemon to use (one/of/four/moves)

#if you pick switch out
    # pick which pokemon you're going to switch out to

#once your move is planned, it's put into the action queue.

#then the action queue is iterated through, and points are tallied and recorded
    #if a performer hits a jackpot, then the performer may get extra points
    #'jamming' effects also happen here 

#at the end of the turn, final point totals are tallied, and the order of the action queue is decided for the next turn. (Low-performers perform later. Performing later is a better position, as you can't be 'jammed', and know what roles previous actors are going to take.)
    #animate this, with characters acting happily if they 'moved up' in rank, and poorly if they 'moved down'

"reached pre-here"